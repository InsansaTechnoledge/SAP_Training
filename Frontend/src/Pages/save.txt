import React, { useState, useRef, useEffect } from 'react';
import {
    BookOpen,
    Play,
    Pause,
    Plus,
    Edit2,
    Trash2,
    ChevronRight,
    Clock,
    CheckCircle,
    List,
    ArrowRight,
    Lightbulb,
    Lock,
    Download,
    FileText,
    MessageSquare,
    Phone,
    Calendar,
    Send,
    ThumbsUp,
    Reply,
    Maximize2,
    Minimize2,
    Volume2,
    VolumeX,
    Settings,
    RotateCcw,
    RotateCw,
    AlertTriangle
} from 'lucide-react';

import Video2 from '../assets/Video2.mp4';

const VideoPage = () => {
    const [isPlaying, setIsPlaying] = useState(false);
    const [currentTime, setCurrentTime] = useState(0);
    const [notes, setNotes] = useState([]);
    const [newNote, setNewNote] = useState('');
    const [newComment, setNewComment] = useState('');
    const [showCallForm, setShowCallForm] = useState(false);
    const [isFullscreen, setIsFullscreen] = useState(false);
    const [showSpeedMenu, setShowSpeedMenu] = useState(false);
    const [playbackSpeed, setPlaybackSpeed] = useState(1);
    const [isMuted, setIsMuted] = useState(false);
    const [volume, setVolume] = useState(1);
    const [duration, setDuration] = useState(0);
    const [hoverTime, setHoverTime] = useState(null);
    const [hoverX, setHoverX] = useState(0);
    const [screenCaptureAttempted, setScreenCaptureAttempted] = useState(false);
    const [videoBlurred, setVideoBlurred] = useState(false);
    const [watermarkText] = useState("Protected Content - Not for Distribution");
    const videoRef = useRef(null);
    const videoContainerRef = useRef(null);
    const progressBarRef = useRef(null);
    const canvasRef = useRef(null);
    const watermarkCanvasRef = useRef(null);
    const [isRewindActive, setIsRewindActive] = useState(false);
    const [isForwardActive, setIsForwardActive] = useState(false);
    const [lastActiveTime, setLastActiveTime] = useState(Date.now());
    const [idleWarningShown, setIdleWarningShown] = useState(false);
    const [tabSwitched, setTabSwitched] = useState(false);


    // Sample video data
    const currentVideo = {
        title: "Introduction to ABAP",
        duration: "10:00",
        progress: 40,
        module: "ABAP Fundamentals",
        src: Video2
    };

    

    useEffect(() => {
        const handleBeforePrint = () => {
            setVideoBlurred(true); // Blur the page when print is attempted
            console.log
        };

        const handleAfterPrint = () => {
            setVideoBlurred(false); // Restore visibility after print dialog is closed
        };

        window.addEventListener("beforeprint", handleBeforePrint);
        window.addEventListener("afterprint", handleAfterPrint);

        return () => {
            window.removeEventListener("beforeprint", handleBeforePrint);
            window.removeEventListener("afterprint", handleAfterPrint);
        };
    }, []);


    const playbackSpeeds = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2];

    // Detect screen capture attempts
    useEffect(() => {
        // Function to detect when a user attempts to take a screenshot
        const handleKeyDown = (e) => {
            // Update user activity timestamp
            setLastActiveTime(Date.now());
            setIdleWarningShown(false);

            // Common screenshot kefy combinations
            const isPrintScreen = e.key === 'PrintScreen';
            const isMacScreenshot = (e.metaKey || e.ctrlKey) && e.shiftKey && (e.key === '3' || e.key === '4' || e.key === '5');
            const isWindowsSnippingTool = e.shiftKey && e.key === 'S' && e.ctrlKey;
            const isGameBarRecording = e.altKey && e.key.toLowerCase() === 'r';

            if (isPrintScreen || isMacScreenshot || isWindowsSnippingTool) {
                e.preventDefault();
                e.stopPropagation();
                handleScreenCaptureAttempt();
                return false;
            }

            if (isGameBarRecording) {
                e.preventDefault();
                e.stopPropagation();
                handleScreenCaptureAttempt();
                console.log("Game Bar Recording Detected!"); // Optional for debugging
                return false;
            }



            // Allow spacebar for play/pause
            if (e.code === "Space") {
                e.preventDefault(); // Prevents scrolling when pressing spacebar
                handlePlayPause();
            }
        };

        // Block right-click menu (basic protection)
        const handleContextMenu = (e) => {
            if (videoContainerRef.current?.contains(e.target)) {
                e.preventDefault();
            }
        };

        // Properly implement visibility change detection
        const handleVisibilityChange = () => {
            if (document.hidden) {
                handleScreenCaptureAttempt();
            }
            if (document.hidden) {
                setTabSwitched(true);
                if (videoRef.current && isPlaying) {
                    videoRef.current.pause();
                    setIsPlaying(false);
                }
            }
        };
        document.addEventListener("visibilitychange", handleVisibilityChange);

        // screen recording detection
        const detectScreenCapture = async () => {
            try {
                if (navigator.mediaDevices && typeof navigator.mediaDevices.getDisplayMedia === 'function') {
                    const originalGetDisplayMedia = navigator.mediaDevices.getDisplayMedia;

                    navigator.mediaDevices.getDisplayMedia = async function (constraints) {
                        // Trigger the screen capture protection
                        handleScreenCaptureAttempt();

                        // Either block completely or let it continue based on your preference
                        // Option 1: Block completely (will cause rejection errors in calling code)
                        // throw new Error('Screen capture is not allowed');

                        // Option 2: Let it proceed but with visual protection
                        return originalGetDisplayMedia.call(this, constraints);
                    };
                }
            } catch (error) {
                console.error("Error setting up screen recording detection:", error);
            }
        };

        // Mouse movement detection for activity tracking
        const handleUserActivity = () => {
            setLastActiveTime(Date.now());
            setIdleWarningShown(false);
        };

        // Set up event listeners
        document.addEventListener("keydown", handleKeyDown, true); // Use capture phase
        document.addEventListener("contextmenu", handleContextMenu);
        document.addEventListener("mousemove", handleUserActivity);
        document.addEventListener("click", handleUserActivity);
        document.addEventListener("scroll", handleUserActivity);
        detectScreenCapture();

        // Clean up event listeners
        return () => {
            document.removeEventListener("keydown", handleKeyDown, true);
            document.removeEventListener("contextmenu", handleContextMenu);
            document.removeEventListener("mousemove", handleUserActivity);
            document.removeEventListener("click", handleUserActivity);
            document.removeEventListener("scroll", handleUserActivity);
            document.removeEventListener("visibilitychange", handleVisibilityChange);
        };
    }, []);


    //  dynamic watermarking for the video that identifies the user ! 

    useEffect(() => {
        if (videoRef.current && watermarkCanvasRef.current) {
            const drawWatermark = () => {
                const canvas = watermarkCanvasRef.current;
                if (!canvas) return;

                const ctx = canvas.getContext('2d');
                const video = videoRef.current;

                // Match canvas size to video
                canvas.width = videoContainerRef.current.clientWidth;
                canvas.height = videoContainerRef.current.clientHeight;

                // Clear the canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                // Company info
                const companyName = "Insansa Techknowledge";

                // Add user ID or email dynamically
                const userIdentifier = "user@example.com";
                const timestamp = new Date().toISOString().split('T')[0]; // Just the date part
                const watermarkContent = `${watermarkText} â€¢ ${userIdentifier}`;

                // Create gradient for more attractive appearance
                const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
                gradient.addColorStop(0, 'rgba(65, 105, 225, 0.3)'); // Royal blue
                gradient.addColorStop(1, 'rgba(100, 149, 237, 0.3)'); // Cornflower blue

                // Draw diagonal watermarks across the video - more spaced out
                for (let y = 60; y < canvas.height; y += 180) {
                    // Draw company name with style
                    ctx.save();
                    ctx.translate(canvas.width / 2, y);
                    ctx.rotate(-0.15); // Gentler angle
                    ctx.font = 'bold 18px Arial';
                    ctx.fillStyle = gradient;
                    ctx.textAlign = 'center';
                    ctx.fillText(companyName, 0, 0);

                    // Draw additional info in smaller text below
                    ctx.font = '14px Arial';
                    ctx.fillStyle = 'rgba(255, 255, 255, 0.25)'; // Less opaque
                    ctx.fillText(watermarkContent, 0, 20);

                    // Add date in smaller text
                    ctx.font = '12px Arial';
                    ctx.fillText(timestamp, 0, 38);
                    ctx.restore();
                }

                // Request next frame
                if (isPlaying) {
                    requestAnimationFrame(drawWatermark);
                }
            };

            // Start rendering watermark
            drawWatermark();

            // Redraw on resize
            const handleResize = () => {
                drawWatermark();
            };

            window.addEventListener('resize', handleResize);
            return () => window.removeEventListener('resize', handleResize);
        }
    }, [isPlaying, watermarkText]);


    // Monitor for user inactivity and add blur effect after period of inactivity
    // after 2 mins and pause after 3 mins

    useEffect(() => {
        const idleCheckInterval = setInterval(() => {
            const idleTime = Date.now() - lastActiveTime;

            // Show warning after 2 minutes of inactivity
            if (idleTime > 120000 && !idleWarningShown) {
                setIdleWarningShown(true);
            }

            // Blur video after 3 minutes of inactivity
            if (idleTime > 180000) {
                setVideoBlurred(true);
                if (isPlaying) {
                    videoRef.current.pause();
                    setIsPlaying(false);
                }
            }
        }, 10000); // Check every 10 seconds

        return () => clearInterval(idleCheckInterval);
    }, [lastActiveTime, idleWarningShown, isPlaying]);

    // Handle screen capture attempt
    const handleScreenCaptureAttempt = () => {
        console.log("Screen capture attempt detected!");

        // Immediately blur the video
        setVideoBlurred(true);
        setScreenCaptureAttempted(true);

        // Pause the video
        if (videoRef.current && isPlaying) {
            videoRef.current.pause();
            setIsPlaying(false);
        }

        // Add an additional layer of protection by adding a temporary overlay
        if (videoContainerRef.current) {
            const overlay = document.createElement('div');
            overlay.style.position = 'absolute';
            overlay.style.top = '0';
            overlay.style.left = '0';
            overlay.style.width = '100%';
            overlay.style.height = '100%';
            overlay.style.backgroundColor = 'rgba(0,0,0,0.8)';
            overlay.style.color = 'white';
            overlay.style.display = 'flex';
            overlay.style.justifyContent = 'center';
            overlay.style.alignItems = 'center';
            overlay.style.zIndex = '9999';
            overlay.style.textAlign = 'center';
            overlay.style.padding = '20px';
            overlay.id = 'capture-protection-overlay';
            overlay.innerHTML = `
      <div>
        <h2>Screen Capture Detected</h2>
        <p>Screen recording and capture are not permitted for this protected content.</p>
        <p>This incident has been logged.</p>
      </div>
    `;

            // Only add if it doesn't exist already
            if (!document.getElementById('capture-protection-overlay')) {
                videoContainerRef.current.appendChild(overlay);
            }
        }

        // Additional measure: Scramble the video buffer if possible
        if (videoRef.current && videoRef.current.captureStream) {
            try {
                // This attempt to access captureStream will help detect recording
                const stream = videoRef.current.captureStream();
                console.log("Stream accessed, potential capture in progress");
            } catch (e) {
                console.log("Stream access error:", e);
            }
        }

        // Log the attempt (in a real app, you might want to report this to a server)
        console.log("Screen capture attempt at", new Date().toISOString());

        //  send this event to your server:

        // fetch('/api/report-capture-attempt', {
        //   method: 'POST',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify({
        //     timestamp: new Date().toISOString(),
        //     userId: 'current-user-id',
        //     videoId: 'current-video-id'
        //   })
        // });

        // Reset after a delay
        setTimeout(() => {
            setVideoBlurred(false);
            setScreenCaptureAttempted(false);

            // Remove the overlay
            const overlay = document.getElementById('capture-protection-overlay');
            if (overlay) overlay.remove();
        }, 8000);
    };

    
    // Reset blur state when user interacts again
    const handleResetBlur = () => {
        setVideoBlurred(false);
        setScreenCaptureAttempted(false);
        setLastActiveTime(Date.now());
        setIdleWarningShown(false);
    };

    const handlePlayPause = () => {
        handleResetBlur();
        if (videoRef.current) {
            if (isPlaying) {
                videoRef.current.pause();
            } else {
                videoRef.current.play();
            }
            setIsPlaying(!isPlaying);
        }
    };

    // Forward 10s
    const handleForward = () => {
        handleResetBlur();
        if (videoRef.current) {
            const newTime = Math.min(videoRef.current.currentTime + 10, duration);
            videoRef.current.currentTime = newTime;
            setCurrentTime(newTime);
            setIsForwardActive(true);
            setTimeout(() => setIsForwardActive(false), 300);
        }
    };

    // Rewind 10s
    const handleRewind = () => {
        handleResetBlur();
        if (videoRef.current) {
            const newTime = Math.max(videoRef.current.currentTime - 10, 0);
            videoRef.current.currentTime = newTime;
            setCurrentTime(newTime);
            setIsRewindActive(true);
            setTimeout(() => setIsRewindActive(false), 300);
        }
    };

    const handleTimeUpdate = () => {
        if (videoRef.current) {
            setCurrentTime(videoRef.current.currentTime);
        }
    };

    const handleFullscreen = () => {
        handleResetBlur();
        if (!document.fullscreenElement) {
            videoContainerRef.current.requestFullscreen();
            setIsFullscreen(true);
        } else {
            document.exitFullscreen();
            setIsFullscreen(false);
        }
    };

    const handleSpeedChange = (speed) => {
        handleResetBlur();
        if (videoRef.current) {
            videoRef.current.playbackRate = speed;
            setPlaybackSpeed(speed);
            setShowSpeedMenu(false);
        }
    };

    const handleVolumeChange = (e) => {
        handleResetBlur();
        const newVolume = parseFloat(e.target.value);
        setVolume(newVolume);
        if (videoRef.current) {
            videoRef.current.volume = newVolume;
            setIsMuted(newVolume === 0);
        }
    };

    const toggleMute = () => {
        handleResetBlur();
        if (videoRef.current) {
            videoRef.current.muted = !isMuted;
            setIsMuted(!isMuted);
            if (!isMuted) {
                setVolume(0);
            } else {
                setVolume(1);
                videoRef.current.volume = 1;
            }
        }
    };

    const moduleVideos = [
        { id: 1, title: "Introduction to ABAP", duration: "10:00", completed: true },
        { id: 2, title: "Data Types & Variables", duration: "8:00", completed: false },
        { id: 3, title: "Control Structures", duration: "12:00", completed: false }
    ];

    // Next module data
    const nextModule = {
        title: "Advanced ABAP",
        description: "Dive deep into advanced ABAP concepts with industry-standard practices and patterns",
        topics: [
            "Object-Oriented Programming",
            "Design Patterns",
            "ABAP Units",
            "ODATA"
        ],
        price: 49,
        isLocked: true
    };

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    // Click on progress bar to seek video
    const handleProgressBarClick = (event) => {
        handleResetBlur();
        if (videoRef.current && progressBarRef.current) {
            const rect = progressBarRef.current.getBoundingClientRect();
            const clickX = event.clientX - rect.left; // X position inside the progress bar
            const progressWidth = rect.width; // Width of the progress bar
            const seekTime = (clickX / progressWidth) * videoRef.current.duration;

            videoRef.current.currentTime = seekTime;
            setCurrentTime(seekTime);
        }
    };

    // Show timestamp on hover
    const handleProgressBarHover = (event) => {
        handleResetBlur();
        if (progressBarRef.current && videoRef.current) {
            const rect = progressBarRef.current.getBoundingClientRect();
            const hoverX = event.clientX - rect.left;
            const progressWidth = rect.width;
            const hoverTime = (hoverX / progressWidth) * videoRef.current.duration;

            setHoverTime(formatTime(hoverTime));
            setHoverX(hoverX);
        }
    };

    // Hide timestamp when mouse leaves
    const handleMouseLeave = () => {
        setHoverTime(null);
    };

    const addNote = () => {
        handleResetBlur();
        if (newNote.trim()) {
            setNotes([
                ...notes,
                { id: Date.now(), timestamp: currentTime, content: newNote, time: formatTime(currentTime) }
            ]);
            setNewNote('');
        }
    };

    const deleteNote = (noteId) => {
        setNotes(notes.filter(note => note.id !== noteId));
    };

    const resources = [
        { id: 1, title: "ABAP Fundamentals Cheat Sheet", type: "PDF", size: "2.1 MB" },
        { id: 2, title: "Exercise Files", type: "ZIP", size: "4.5 MB" },
        { id: 3, title: "Code Examples", type: "TXT", size: "156 KB" },
        { id: 4, title: "Practice Questions", type: "PDF", size: "1.8 MB" }
    ];

    // Comments data
    const [comments] = useState([
        {
            id: 1,
            user: "Sarah Chen",
            avatar: "/api/placeholder/32/32",
            content: "How do we handle exception cases in this scenario?",
            timestamp: "2 hours ago",
            likes: 5,
            replies: [
                {
                    id: 101,
                    user: "Michael Ross",
                    avatar: "/api/placeholder/32/32",
                    content: "You can use TRY-CATCH blocks to handle exceptions gracefully.",
                    timestamp: "1 hour ago",
                    likes: 3
                }
            ]
        },
        {
            id: 2,
            user: "David Kumar",
            avatar: "/api/placeholder/32/32",
            content: "Great explanation of the concepts! One question - can we use this in combination with OData?",
            timestamp: "3 hours ago",
            likes: 8,
            replies: []
        }
    ]);


    return (
        <div className="min-h-screen bg-theme-gradient" onCopy={(e) => e.preventDefault()} onContextMenu={(e) => e.preventDefault()}>
            <div className="container mx-auto px-4 py-8 mt-20">
                {/* Navigation Breadcrumb */}
                <div className="flex items-center gap-2 text-sm text-secondary mb-6">
                    <span>ABAP Fundamentals</span>
                    <ChevronRight className="h-4 w-4" />
                    <span className="text-blue">Introduction to ABAP</span>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* Video Player Section */}
                    <div className="lg:col-span-2 space-y-6">
                        {/* Video Player */}
                        <div
                            ref={videoContainerRef}
                            className="relative bg-gray-900 rounded-xl aspect-video overflow-hidden border-contrast select-none"
                            onDragStart={(e) => e.preventDefault()}
                        >
                            {/* Video element */}
                            <video
                                ref={videoRef}
                                className={`w-full h-full ${videoBlurred ? 'blur-xl' : ''} transition-all duration-300`}
                                src={"https://res.cloudinary.com/dgapvegsq/video/upload/v1739252871/ydjmvohvg00e2dxnbojo.mp4"}
                                onClick={handlePlayPause}
                                onTimeUpdate={handleTimeUpdate}
                                onLoadedMetadata={() => setDuration(videoRef.current?.duration || 0)}
                                onPlay={() => setIsPlaying(true)}
                                onPause={() => setIsPlaying(false)}
                                // Disable right-click
                                onContextMenu={(e) => e.preventDefault()}
                                // Disable dragging video
                                draggable="false"
                                // Disable picture-in-picture
                                disablePictureInPicture
                                // Disable download
                                controlsList="nodownload"
                                playsInline
                            />

                            {/* Watermark overlay canvas */}
                            <canvas
                                ref={watermarkCanvasRef}
                                className="absolute inset-0 pointer-events-none z-10"
                            />

                            {/* Blurred video protection notice */}
                            {videoBlurred && (
                                <div className="absolute inset-0 flex flex-col items-center justify-center z-20 p-6 text-center">
                                    <AlertTriangle className="h-12 w-12 text-red-500 mb-4" />
                                    {screenCaptureAttempted ? (
                                        <>
                                            <h3 className="text-xl font-bold text-white mb-2">Screen Capture Detected</h3>
                                            <p className="text-white mb-4">Screen recording or screenshot attempts are not allowed for this protected content.</p>
                                        </>
                                    ) : (
                                        <>
                                            <h3 className="text-xl font-bold text-white mb-2">Session Paused</h3>
                                            <p className="text-white mb-4">Content has been paused due to inactivity.</p>
                                        </>
                                    )}
                                    <button
                                        onClick={handleResetBlur}
                                        className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors"
                                    >
                                        Resume Viewing
                                    </button>
                                </div>
                            )}

                            {tabSwitched && (
                                <div className="absolute inset-0 flex flex-col items-center justify-center bg-black/80 text-white z-50">
                                    <h2 className="text-2xl font-bold mb-4">Changing tab is not permitted</h2>
                                    <button
                                        className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors"
                                        onClick={() => setTabSwitched(false)}
                                    >
                                        Continue
                                    </button>
                                </div>
                            )}


                            {/* Idle warning notification */}
                            {idleWarningShown && !videoBlurred && (
                                <div className="absolute bottom-20 left-0 right-0 mx-auto w-4/5 bg-gray-800 text-white p-4 rounded-lg shadow-lg flex items-center justify-between z-30">
                                    <div className="flex items-center">
                                        <AlertTriangle className="h-5 w-5 text-yellow-400 mr-3" />
                                        <p>Are you still watching? Content will be paused soon due to inactivity.</p>
                                    </div>
                                    <button
                                        onClick={handleResetBlur}
                                        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-500 transition-colors"
                                    >
                                        Continue Watching
                                    </button>
                                </div>
                            )}

                            {/* Play Button Overlay (Appears Only When Paused) */}
                            {!isPlaying && !videoBlurred && (
                                <div className="absolute inset-0 flex items-center justify-center">
                                    <button
                                        onClick={handlePlayPause}
                                        className="p-4 rounded-full bg-blue-600 text-white hover:bg-blue-500 transition-colors"
                                    >
                                        <Play className="h-6 w-6" />
                                    </button>
                                </div>
                            )}

                            {/* Video Controls */}
                            <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-4">

                                {/* Clickable Progress Bar */}
                                <div
                                    ref={progressBarRef}
                                    className="relative w-full h-2 bg-gray-600 rounded-full cursor-pointer mb-4"
                                    onClick={handleProgressBarClick} // Seek on click
                                    onMouseMove={handleProgressBarHover} // Show timestamp
                                    onMouseLeave={handleMouseLeave} // Hide timestamp
                                >
                                    <div
                                        className="absolute top-0 left-0 h-full bg-blue-600 rounded-full"
                                        style={{ width: `${(currentTime / (duration || 1)) * 100}%` }}
                                    />

                                    {/* Timestamp Tooltip on Hover */}
                                    {hoverTime && (
                                        <div
                                            className="absolute -top-8 px-2 py-1 bg-black text-white text-xs rounded"
                                            style={{ left: `${hoverX}px`, transform: "translateX(-50%)" }}
                                        >
                                            {hoverTime}
                                        </div>
                                    )}
                                </div>

                                {/* Control Buttons */}
                                <div className="flex items-center gap-4">

                                    {/* Rewind 10s */}
                                    <button
                                        onClick={handleRewind}
                                        className={`group relative transform transition-all duration-300 
          ${isRewindActive ? 'scale-90' : 'hover:scale-110'}`}
                                    >
                                        <div className="absolute inset-0 bg-blue-500 rounded-full opacity-0 group-hover:opacity-20 
          transition-opacity duration-300" />
                                        <RotateCcw
                                            className={`h-8 w-8 transition-all duration-300
            ${isRewindActive ? 'text-blue-400' : 'text-white'}
            group-hover:text-blue-400`}
                                        />
                                        <span className="absolute -top-8 left-1/2 transform -translate-x-1/2 
          text-xs text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                            -10s
                                        </span>
                                    </button>


                                    {/* Play/Pause */}
                                    <button
                                        onClick={handlePlayPause}
                                        className="group relative transform transition-all duration-300 hover:scale-110"
                                    >
                                        <div className="absolute inset-0 bg-blue-500 rounded-full opacity-0 group-hover:opacity-20 
          transition-opacity duration-300" />
                                        {isPlaying ? (
                                            <Pause className="h-10 w-10 text-white group-hover:text-blue-400 
            transition-colors duration-300" />
                                        ) : (
                                            <Play className="h-10 w-10 text-white group-hover:text-blue-400 
            transition-colors duration-300" />
                                        )}
                                    </button>

                                    {/* Forward 10s */}
                                    <button
                                        onClick={handleForward}
                                        className={`group relative transform transition-all duration-300 
          ${isForwardActive ? 'scale-90' : 'hover:scale-110'}`}
                                    >
                                        <div className="absolute inset-0 bg-blue-500 rounded-full opacity-0 group-hover:opacity-20 
          transition-opacity duration-300" />
                                        <RotateCw
                                            className={`h-8 w-8 transition-all duration-300
            ${isForwardActive ? 'text-blue-400' : 'text-white'}
            group-hover:text-blue-400`}
                                        />
                                        <span className="absolute -top-8 left-1/2 transform -translate-x-1/2 
          text-xs text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                            +10s
                                        </span>
                                    </button>

                                    {/* Volume Controls */}

                                    <div className="flex items-center gap-2">
                                        <button
                                            onClick={toggleMute}
                                            className="text-white hover:text-blue-400 transition-colors"
                                        >
                                            {isMuted ? (
                                                <VolumeX className="h-5 w-5" />
                                            ) : (
                                                <Volume2 className="h-5 w-5" />
                                            )}
                                        </button>
                                        <input
                                            type="range"
                                            min="0"
                                            max="1"
                                            step="0.1"
                                            value={volume}
                                            onChange={handleVolumeChange}
                                            className="w-20"
                                        />
                                    </div>



                                    {/* Time Display */}
                                    <div className="text-white text-sm">
                                        {formatTime(currentTime)} / {formatTime(videoRef.current?.duration || 0)}
                                    </div>

                                    {/* Playback Speed */}
                                    <div className="relative">
                                        <button
                                            onClick={() => setShowSpeedMenu(!showSpeedMenu)}
                                            className="text-white hover:text-blue-400 transition-colors flex items-center gap-1"
                                        >
                                            <Settings className="h-5 w-5" />
                                            {playbackSpeed}x
                                        </button>

                                        {showSpeedMenu && (
                                            <div className="absolute bottom-full mb-2 right-0 bg-gray-900 rounded-lg shadow-lg p-2">
                                                {playbackSpeeds.map((speed) => (
                                                    <button
                                                        key={speed}
                                                        onClick={() => handleSpeedChange(speed)}
                                                        className={`block w-full text-left px-4 py-1 text-sm ${playbackSpeed === speed ? 'text-blue-400' : 'text-white'
                                                            } hover:bg-gray-800 rounded`}
                                                    >
                                                        {speed}x
                                                    </button>
                                                ))}
                                            </div>
                                        )}
                                    </div>

                                    {/* Fullscreen */}
                                    <button
                                        onClick={handleFullscreen}
                                        className="text-white hover:text-blue-400 transition-colors ml-auto"
                                    >
                                        {isFullscreen ? (
                                            <Minimize2 className="h-5 w-5" />
                                        ) : (
                                            <Maximize2 className="h-5 w-5" />
                                        )}
                                    </button>
                                </div>
                            </div>
                        </div>

                        {/* Video Info */}
                        <div>
                            <h1 className="text-2xl font-bold text-secondary mb-2">
                                {currentVideo.title}
                            </h1>
                            <p className="text-secondary">
                                Part of <span className="text-blue">{currentVideo.module}</span> module
                            </p>
                        </div>

                        {/* Notes Section */}
                        <div className="bg-card rounded-xl p-6 shadow-sm">
                            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 text-secondary">
                                <BookOpen className="h-5 w-5 text-blue" />
                                Video Notes
                            </h2>

                            {/* Add Note */}
                            <div className="flex gap-3 mb-6">
                                <input
                                    type="text"
                                    value={newNote}
                                    onChange={(e) => setNewNote(e.target.value)}
                                    placeholder="Add a note at current timestamp..."
                                    className="flex-1 px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-secondary"
                                />
                                <button
                                    onClick={addNote}
                                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors flex items-center gap-2"
                                >
                                    <Plus className="h-4 w-4" />
                                    Add Note
                                </button>
                            </div>

                            {/* Notes List */}
                            <div className="space-y-4">
                                {notes.map(note => (
                                    <div key={note.id} className="flex items-start gap-4 p-4 bg-card border-contrast rounded-lg">
                                        <div className="flex items-center text-sm text-secondary">
                                            <Clock className="h-4 w-4 mr-1" />
                                            {note.time}
                                        </div>
                                        <p className="flex-1 text-secondary">{note.content}</p>
                                        <div className="flex items-center gap-2">
                                            <button
                                                onClick={() => deleteNote(note.id)}
                                                className="p-1 text-red-500 hover:bg-red-50 rounded-full transition-colors"
                                            >
                                                <Trash2 className="h-4 w-4" />
                                            </button>
                                            <button
                                                className="p-1 text-blue-500 hover:bg-blue-50 rounded-full transition-colors"
                                            >
                                                <Edit2 className="h-4 w-4" />
                                            </button>
                                        </div>
                                    </div>
                                ))}

                                {notes.length === 0 && (
                                    <div className="text-center py-8 text-gray-500">
                                        <p>No notes yet. Add your first note at any point in the video.</p>
                                    </div>
                                )}
                            </div>
                        </div>

                        {/* Discussion Section */}
                        <div className="bg-card rounded-xl p-6 shadow-sm">
                            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 text-secondary">
                                <MessageSquare className="h-5 w-5 text-blue" />
                                Discussion
                            </h2>

                            {/* Add Comment */}
                            <div className="flex gap-3 mb-6">
                                <input
                                    type="text"
                                    value={newComment}
                                    onChange={(e) => setNewComment(e.target.value)}
                                    placeholder="Add a comment or question..."
                                    className="flex-1 px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-secondary"
                                />
                                <button
                                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors flex items-center gap-2"
                                    onClick={() => setNewComment('')}
                                >
                                    <Send className="h-4 w-4" />
                                    Post
                                </button>
                            </div>

                            {/* Comments List */}
                            <div className="space-y-6">
                                {comments.map(comment => (
                                    <div key={comment.id} className="space-y-4">
                                        {/* Main Comment */}
                                        <div className="flex gap-4">
                                            <img
                                                src={comment.avatar}
                                                alt={comment.user}
                                                className="w-10 h-10 rounded-full"
                                            />
                                            <div className="flex-1">
                                                <div className="flex items-center gap-2 mb-1">
                                                    <h4 className="font-medium text-secondary">{comment.user}</h4>
                                                    <span className="text-xs text-gray-500">{comment.timestamp}</span>
                                                </div>
                                                <p className="text-secondary mb-2">{comment.content}</p>
                                                <div className="flex items-center gap-4 text-sm">
                                                    <button className="flex items-center gap-1 text-gray-500 hover:text-blue-500 transition-colors">
                                                        <ThumbsUp className="h-4 w-4" />
                                                        <span>{comment.likes}</span>
                                                    </button>
                                                    <button className="flex items-center gap-1 text-gray-500 hover:text-blue-500 transition-colors">
                                                        <Reply className="h-4 w-4" />
                                                        <span>Reply</span>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>

                                        {/* Replies */}
                                        {comment.replies.length > 0 && (
                                            <div className="pl-14 space-y-4">
                                                {comment.replies.map(reply => (
                                                    <div key={reply.id} className="flex gap-4">
                                                        <img
                                                            src={reply.avatar}
                                                            alt={reply.user}
                                                            className="w-8 h-8 rounded-full"
                                                        />
                                                        <div className="flex-1">
                                                            <div className="flex items-center gap-2 mb-1">
                                                                <h4 className="font-medium text-secondary">{reply.user}</h4>
                                                                <span className="text-xs text-gray-500">{reply.timestamp}</span>
                                                            </div>
                                                            <p className="text-secondary mb-2">{reply.content}</p>
                                                            <div className="flex items-center gap-4 text-sm">
                                                                <button className="flex items-center gap-1 text-gray-500 hover:text-blue-500 transition-colors">
                                                                    <ThumbsUp className="h-4 w-4" />
                                                                    <span>{reply.likes}</span>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Sidebar */}
                    <div className="space-y-6">
                        {/* Course Progress */}
                        <div className="bg-card rounded-xl p-6 shadow-sm">
                            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 text-secondary">
                                <List className="h-5 w-5 text-blue" />
                                Course Content
                            </h2>

                            <div className="mb-4">
                                <div className="flex items-center gap-2 mb-2">
                                    <div className="flex-1 h-2 bg-gray-200 rounded-full overflow-hidden">
                                        <div
                                            className="h-full bg-blue-600 rounded-full"
                                            style={{ width: '40%' }}
                                        ></div>
                                    </div>
                                    <span className="text-sm font-medium text-blue-600">40%</span>
                                </div>
                                <p className="text-sm text-gray-500">4 of 10 videos completed</p>
                            </div>

                            {/* Module Videos */}
                            <div className="space-y-3">
                                {moduleVideos.map(video => (
                                    <div key={video.id} className="flex items-center p-3 rounded-lg border-contrast hover:bg-gray-50 transition-colors">
                                        <div className="mr-3">
                                            {video.completed ? (
                                                <CheckCircle className="h-5 w-5 text-green-500" />
                                            ) : (
                                                <Play className="h-5 w-5 text-blue-600" />
                                            )}
                                        </div>
                                        <div className="flex-1">
                                            <h3 className="font-medium text-secondary">{video.title}</h3>
                                            <p className="text-sm text-gray-500">{video.duration}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Schedule a Call */}
                        <div className="bg-card rounded-xl p-6 shadow-sm">
                            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 text-secondary">
                                <Phone className="h-5 w-5 text-blue" />
                                Get Expert Help
                            </h2>

                            <p className="text-secondary mb-4">Still have questions? Schedule a 1-on-1 call with an instructor to get personalized help.</p>

                            {!showCallForm ? (
                                <button
                                    onClick={() => setShowCallForm(true)}
                                    className="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors flex items-center justify-center gap-2"
                                >
                                    <Calendar className="h-4 w-4" />
                                    Schedule a Call
                                </button>
                            ) : (
                                <div className="space-y-4">
                                    <div>
                                        <label className="block text-sm font-medium text-secondary mb-1">Preferred Date</label>
                                        <input
                                            type="date"
                                            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-secondary mb-1">Topic</label>
                                        <select className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                                            <option>ABAP Syntax Questions</option>
                                            <option>Debugging Issues</option>
                                            <option>Project Guidance</option>
                                            <option>Career Advice</option>
                                        </select>
                                    </div>
                                    <button className="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors">
                                        Submit Request
                                    </button>
                                </div>
                            )}
                        </div>

                        {/* Resources */}
                        <div className="bg-card rounded-xl p-6 shadow-sm">
                            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2 text-secondary">
                                <FileText className="h-5 w-5 text-blue" />
                                Resources
                            </h2>

                            <div className="space-y-3">
                                {resources.map(resource => (
                                    <div key={resource.id} className="flex items-center justify-between p-3 rounded-lg border-contrast hover:bg-gray-50 transition-colors">
                                        <div className="flex items-center">
                                            <div className="mr-3 p-2 bg-blue-100 rounded text-blue-600">
                                                <FileText className="h-4 w-4" />
                                            </div>
                                            <div>
                                                <h3 className="font-medium text-secondary">{resource.title}</h3>
                                                <p className="text-xs text-gray-500">{resource.type} â€¢ {resource.size}</p>
                                            </div>
                                        </div>
                                        <button className="p-2 text-blue-600 hover:bg-blue-50 rounded-full transition-colors">
                                            <Download className="h-4 w-4" />
                                        </button>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Next Module */}
                        <div className="bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl p-6 shadow-lg text-white">
                            <div className="flex items-center justify-between mb-4">
                                <h2 className="text-lg font-semibold flex items-center gap-2">
                                    <Lightbulb className="h-5 w-5" />
                                    Up Next
                                </h2>
                                {nextModule.isLocked && (
                                    <span className="flex items-center text-xs bg-white/20 px-2 py-1 rounded">
                                        <Lock className="h-3 w-3 mr-1" />
                                        Premium
                                    </span>
                                )}
                            </div>

                            <h3 className="text-xl font-bold mb-2">{nextModule.title}</h3>
                            <p className="text-blue-100 mb-4">{nextModule.description}</p>

                            <div className="mb-6">
                                <h4 className="text-sm uppercase tracking-wider text-blue-200 mb-2">What you'll learn</h4>
                                <ul className="space-y-2">
                                    {nextModule.topics.map((topic, index) => (
                                        <li key={index} className="flex items-center gap-2">
                                            <ArrowRight className="h-4 w-4 text-blue-300" />
                                            <span>{topic}</span>
                                        </li>
                                    ))}
                                </ul>
                            </div>

                            <button className="w-full py-3 bg-white text-blue-600 font-medium rounded-lg hover:bg-blue-50 transition-colors flex items-center justify-center gap-2">
                                <span>Unlock for ${nextModule.price}</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default VideoPage;